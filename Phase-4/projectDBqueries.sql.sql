--ROLLUP QUERY
-- The number of orders made monthly, quarterly, and Yearly.
SELECT
YEAR, QUARTER, MONTH, COUNT(ORDER_ID) AS Count
FROM
(
SELECT
CASE WHEN EXTRACT(MONTH FROM ORDER_TIME) BETWEEN 1 AND 3 THEN 'Q1'
            WHEN EXTRACT(MONTH FROM ORDER_TIME) BETWEEN 4 AND 6 THEN 'Q2'
            WHEN EXTRACT(MONTH FROM ORDER_TIME) BETWEEN 6 AND 9 THEN 'Q3'
            WHEN EXTRACT(MONTH FROM ORDER_TIME) BETWEEN 10 AND 12 THEN 'Q4'
       END AS QUARTER
       , TO_CHAR(ORDER_TIME, 'FMMONTH') AS MONTH
       , EXTRACT(YEAR FROM ORDER_TIME) AS YEAR
, ORDER_TIME 
,ORDER_ID
, FOOD_ID
FROM SPRING23_S003_21_ORDER
) O
INNER JOIN SPRING23_S003_21_MENU M ON M.FOOD_ID = O.FOOD_ID
GROUP BY ROLLUP(YEAR,QUARTER,MONTH) ;



--CUBE QUERY
-- Number of Employees and the Orders count for each Kitchen and Region
SELECT
 R.REGION_NAME, K.KITCHEN_CITY
, COUNT(DISTINCT ORDER_ID) AS Orders, COUNT(DISTINCT K.EMPLOYEE_ID) AS Employee_Count
FROM
(
SELECT K.KITCHEN_ID, K.KITCHEN_CITY, K.REGIONAL_MANAGER_ID, E.EMPLOYEE_ID
FROM SPRING23_S003_21_KITCHEN K
INNER JOIN SPRING23_S003_21_EMPLOYEE E ON E.EMPLOYEE_WORK_LOCATION = K.KITCHEN_ID
) K
INNER JOIN SPRING23_S003_21_REGION R ON R.REGIONAL_MANAGER_ID = K.REGIONAL_MANAGER_ID
LEFT JOIN SPRING23_S003_21_ORDER O ON O.KITCHEN_ID = K.KITCHEN_ID
GROUP BY CUBE(R.REGION_NAME, K.KITCHEN_CITY);



--Least 20 Food Items ordered.
SELECT
M.FOOD_ID, M.ITEM_NAME, COALESCE(O.Orders_Count, 0) AS Orders_Count
FROM SPRING23_S003_21_MENU M
LEFT JOIN
(
SELECT M.FOOD_ID, COUNT(O.ORDER_ID) AS Orders_Count
FROM SPRING23_S003_21_MENU M
INNER JOIN SPRING23_S003_21_ORDER O ON O.FOOD_ID = M.FOOD_ID
GROUP BY M.FOOD_ID
) O ON O.FOOD_ID = M.FOOD_ID
ORDER BY COALESCE(O.Orders_Count, 0)
FETCH FIRST 20 ROWS ONLY;


--DIVISON QUERY
-- The Kitchens having only the Vegetarian food orders.
SELECT * FROM SPRING23_S003_21_KITCHEN K
WHERE NOT EXISTS
(
SELECT DISTINCT KITCHEN_ID

FROM SPRING23_S003_21_ORDER O
where o.kitchen_id = k.kitchen_id
and NOT EXISTS
(
SELECT KITCHEN_ID FROM SPRING23_S003_21_MENU M
INNER JOIN SPRING23_S003_21_DISPLAYS_MENU DM ON DM.FOOD_ID = M.FOOD_ID
WHERE UPPER(M.ITEM_CATEGORY) = 'VEGETARIAN'
AND M.FOOD_ID = O.FOOD_ID
)
)


--OVER QUERY
-- Comparison of the Averages of the Sales done Region vs Kitchen. 
SELECT DISTINCT REGION_NAME, KITCHEN_CITY
, ROUND(AVG(O.PRICE) OVER (PARTITION BY R.REGION_ID),2) AS Region_Avg
, ROUND(AVG(O.PRICE) OVER (PARTITION BY K.KITCHEN_ID),2) AS City_Avg 
FROM SPRING23_S003_21_ORDER O
INNER JOIN SPRING23_S003_21_KITCHEN K ON K.KITCHEN_ID = O.KITCHEN_ID
INNER JOIN SPRING23_S003_21_REGION R ON R.REGIONAL_MANAGER_ID = K.REGIONAL_MANAGER_ID
INNER JOIN SPRING23_S003_21_MENU M ON M.FOOD_ID�=�O.FOOD_ID;


--HAVING QUERY
-- The customers who made a total sales of $100 for the last 1 Year (Considered Last 365 Days from today).
SELECT
CUSTOMER_ID, CUSTOMER_LAST_NAME || ' ' || CUSTOMER_FIRST_NAME AS Customer_Name
FROM Spring23_S003_21_CUSTOMER
WHERE CUSTOMER_ID IN
(
SELECT C.CUSTOMER_ID
FROM Spring23_S003_21_CUSTOMER C 
     JOIN SPRING23_S003_21_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
     JOIN SPRING23_S003_21_MENU M ON M.FOOD_ID = O.FOOD_ID
WHERE O.ORDER_TIME >= TRUNC(SYSDATE)-365
GROUP BY C.CUSTOMER_ID
HAVING SUM(O.QUANTITY*M.PRICE) >=100
);


--LIKE QUERY
 -- The food items of Chicken Type which are avaialble in the Kitchens price ranging between $5 and %15.     
SELECT DISTINCT M.ITEM_NAME,M.PRICE
FROM Spring23_S003_21_Menu M 
     JOIN Spring23_S003_21_Displays_menu DM ON M.FOOD_ID = DM.FOOD_ID
     JOIN Spring23_S003_21_Kitchen K ON DM.KITCHEN_ID = K.KITCHEN_ID
WHERE UPPER(M.ITEM_NAME) LIKE '%CHICKEN%'
  AND M.PRICE BETWEEN 5 AND 15
  AND DM.MENU_AVAILABILITY = 1
ORDER BY M.PRICE ASC;


-- GROUP BY WITH HAVING

--GET THE EMPLOYEE DETAILS working in the Kitchen with average customer rating less than 5.
SELECT E.EMPLOYEE_ID, E.EMPLOYEE_LAST_NAME || ' ' || E.EMPLOYEE_FIRST_NAME, K.KITCHEN_CITY, E.EMPLOYEE_POSITION, E.EMPLOYEE_DEPARTMENT
FROM SPRING23_S003_21_KITCHEN K
INNER JOIN SPRING23_S003_21_EMPLOYEE E ON K.KITCHEN_ID = E.EMPLOYEE_WORK_LOCATION
INNER JOIN
(
SELECT K.KITCHEN_ID, ROUND(AVG(CUSTOMER_RATING), 2) AS Rating
FROM SPRING23_S003_21_ORDER O
INNER JOIN SPRING23_S003_21_KITCHEN K ON K.KITCHEN_ID = O.KITCHEN_ID
GROUP BY K.KITCHEN_ID
HAVING ROUND(AVG(CUSTOMER_RATING), 2) < 5
) R ON R.KITCHEN_ID = K.KITCHEN_ID


-- MENU DISPLAYING CONTROL BASED ON THE ORDERS COUNT
-- GET THE KITCHEN DETAILS along with the Food Items with a total orders less than 5.
SELECT K.KITCHEN_ID,M.FOOD_ID,M.ITEM_NAME
FROM SPRING23_S003_21_KITCHEN K
INNER JOIN SPRING23_S003_21_ORDER O ON O.KITCHEN_ID = K.KITCHEN_ID 
JOIN SPRING23_S003_21_DISPLAYS_MENU DM ON K.KITCHEN_ID = DM.KITCHEN_ID
JOIN SPRING23_S003_21_MENU M ON M.FOOD_ID = DM.FOOD_ID
GROUP BY K.KITCHEN_ID, M.ITEM_NAME, M.FOOD_ID
HAVING SUM(O.QUANTITY) < 5 
